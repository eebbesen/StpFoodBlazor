@using Bunit
@using Bunit.Rendering
@using AngleSharp.Dom
@using AngleSharp.Html.Dom
@using StpFoodBlazor.Components.Pages
@using StpFoodBlazor.Models
@using StpFoodBlazor.Services
@using StpFoodBlazorTest.Services

@code {
    private TestContext ctx;
    private TestTimeService timeService = new TestTimeService();

    public UpcomingDealsTest()
    {
        ctx = new TestContext();
        ctx.Services.AddSingleton<IHolidayService>(new TestHolidayService());
        ctx.Services.AddSingleton<ITimeService>(timeService);
    }

    void Dispose()
    {
    }

    [Fact]
    public void UpcomingDealsShouldIncludeUpcomingDeals()
    {
        TestDealService testDealService = new TestDealService();
        testDealService.Deals = new DealEvent[]
        {
            new DealEvent
            {
                Name = "Test Place",
                Deal = "Test description",
                Day = DayOfWeek.Saturday.ToString(),
                Start = "2100-05-15"
            }
        };
        ctx.Services.AddSingleton<IDealService>(testDealService);

        var cut = ctx.Render(@<UpcomingDeals />);
        var elements = getElements(cut);

        Assert.Equal(1, elements.ChildElementCount);
    }

    [Fact]
    public void UpcomingDealsShouldDisplayMessageWhenNoUpcomingDeals()
    {
        TestDealService testDealService = new TestDealService();
        testDealService.NoRecords = true;
        ctx.Services.AddSingleton<IDealService>(testDealService);

        var cut = ctx.Render(@<UpcomingDeals />);
        cut.WaitForElement("#deals_no_records", TimeSpan.FromSeconds(5));

        Assert.Contains("No upcoming deals that are not yet active.", cut.Markup);
    }

    private IElement getElements(IRenderedFragment cut)
    {
        cut.WaitForElement("#deals_table_body", TimeSpan.FromSeconds(5));
        return cut.Find("#deals_table_body");
    }
}
