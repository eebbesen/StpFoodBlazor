@using StpFoodBlazor.Components.Layout
@using StpFoodBlazor.Models
@using StpFoodBlazor.Services
@using StpFoodBlazorTest.Services
@using AngleSharp.Html.Dom
@using AngleSharp.Dom

@code {
    private TestContext ctx;
    private NavigationManager navMan;
    private TestHolidayService holidayService = new TestHolidayService();
    private TestGiftCardService giftCardService = new TestGiftCardService();

    public MainLayoutTest()
    {
        ctx = new TestContext();
        holidayService.Data = CreateHolidays();
        giftCardService.Data = CreateGiftCards();
        ctx.Services.AddSingleton<IHolidayService>(holidayService);
        ctx.Services.AddSingleton<IGiftCardService>(giftCardService);
        navMan = ctx.Services.GetRequiredService<FakeNavigationManager>();
    }

    private Dictionary<string, string[]> CreateHolidays()
    {
        return new Dictionary<string, string[]>{ { DateTime.Now.ToString("MM-dd"), new[] { "Make Lunch Count Day", "National Peach Cobbler Day" } } };
    }

    private GiftCard[] CreateGiftCards()
    {
        return new[]
        {
            new GiftCard
            {
                Deal = "great deal",
                Name = "Gift Card 1"
            }
        };
    }

    [Fact]
    public void ShouldHideDealNavElementWhenRootRoute()
    {
        var cut = RenderMainLayout("");

        var navbar = cut.Find("#navbar-items");
        var navlinks = cut.Find("#nav-links");

        Assert.Equal("messages text-center marquee w-100 d-none d-md-block", navbar.Children[0].ClassName);
        Assert.Equal("marquee-content d-flex align-items-stretch", navbar.Children[0].Children[0].ClassName);
        Assert.Equal(" d-none", navlinks.Children[0].ClassName);
        Assert.Equal(" flex-fill position-relative", navlinks.Children[1].ClassName);
        Assert.Equal(" justify-content-end", navlinks.Children[2].ClassName);
    }

    [Fact]
    public void ShouldHideAboutNavElementWhenAboutRoute()
    {
        var cut = RenderMainLayout("about");

        var navbar = cut.Find("#navbar-items");
        var navlinks = cut.Find("#nav-links");

        Assert.Equal("messages text-center marquee w-100 d-none d-md-block", navbar.Children[0].ClassName);
        Assert.Equal("marquee-content d-flex align-items-stretch", navbar.Children[0].Children[0].ClassName);
        Assert.Equal(" flex-fill", navlinks.Children[0].ClassName);
        Assert.Equal(" justify-content-end position-relative", navlinks.Children[1].ClassName);
        Assert.Equal(" d-none", navlinks.Children[2].ClassName);
    }

    [Fact]
    public void ShouldHideGiftcardNavElementWhenGiftcardsRoute()
    {
        var cut = RenderMainLayout("giftcards");

        var navbar = cut.Find("#navbar-items");
        var navlinks = cut.Find("#nav-links");

        Assert.Equal("messages text-center marquee w-100 d-none d-md-block", navbar.Children[0].ClassName);
        Assert.Equal("marquee-content d-flex align-items-stretch", navbar.Children[0].Children[0].ClassName);
        Assert.Equal(" flex-fill", navlinks.Children[0].ClassName);
    }


    [Fact]
    public void ShouldHideDealsNavElementWhenGiftcardsRouteWithParams()
    {
        var cut = RenderMainLayout("/?alcoholOnly=true&hh=true");

        var navbar = cut.Find("#navbar-items");
        var navlinks = cut.Find("#nav-links");

        Assert.Equal("messages text-center marquee w-100 d-none d-md-block", navbar.Children[0].ClassName);
        Assert.Equal("marquee-content d-flex align-items-stretch", navbar.Children[0].Children[0].ClassName);
        Assert.Equal(" d-none", navlinks.Children[0].ClassName);
        Assert.Equal(" flex-fill position-relative", navlinks.Children[1].ClassName);
        Assert.Equal(" justify-content-end", navlinks.Children[2].ClassName);
    }

    [Fact]
    public void ShouldDecorateGiftCardNavElementWhenGiftCardsExist()
    {
        giftCardService.NoRecords = false;
        var cut = RenderMainLayout("deals");

        var navbarItems = cut.Find("#navbar-items");
        var giftCardNav = cut.Find("#giftcard-nav");
        var giftCardExist = cut.WaitForElement("#giftcards-exist");

        Assert.Equal("position-absolute top-0 start-100 translate-middle p-1 bg-danger border border-light rounded-circle", giftCardExist.ClassName);
        Assert.Equal(" flex-fill position-relative", giftCardNav.ClassName);
    }

    [Fact]
    public void ShouldNotDecorateGiftCardNavElementWhenNoGiftCards()
    {
        giftCardService.NoRecords = true;
        var cut = RenderMainLayout("deals");

        var navbarItems = cut.Find("#navbar-items");
        var giftCardNav = cut.Find("#giftcard-nav");

        Assert.DoesNotContain("giftcards-exist", giftCardNav.InnerHtml);
        Assert.Equal(" flex-fill position-relative", giftCardNav.ClassName);
    }

    private void AssertCommon(IElement navbarItems)
    {
        Assert.Equal(4, navbarItems.Children.Length);
        Assert.Equal("messages", navbarItems.Children[0].Id);
        Assert.Equal("messages w-100 text-center", navbarItems.Children[0].ClassName);
        Assert.Equal("Today: Make Lunch Count Day, National Peach Cobbler Day", navbarItems.Children[0].InnerHtml);
        Assert.Equal("root-nav", navbarItems.Children[1].Id);
        Assert.Equal("giftcard-nav", navbarItems.Children[2].Id);
        Assert.Equal("about-nav", navbarItems.Children[3].Id);
    }

    private IRenderedFragment RenderMainLayout(string route)
    {
        navMan.NavigateTo(route);
        return ctx.Render(@<MainLayout />);
    }
}
