@using StpFoodBlazor.Components.Layout.Deals
@using StpFoodBlazor.Models
@using AngleSharp.Html.Dom
@using AngleSharp.Dom

@code {
    private TestContext ctx;

    public DealTableHeaderTest()
    {
        ctx = new TestContext();
    }

    [Fact]
    public void ShouldRenderComponentsDaySelected()
    {
        var cut = RenderDealTableHead("Sunday");

        var header = cut.Find("#deals_table_header");

        Assert.Equal("row bg-dark text-light rounded", header.ClassName);
        header.Children[0].MarkupMatches("<div class=\"col-3\">Place</div>");
        header.Children[1].MarkupMatches("<div class=\"col\">Deal</div>");
    }

    [Fact]
    public void ShouldRenderComponentsNoDaySelected()
    {
        var cut = RenderDealTableHead("");

        var header = cut.Find("#deals_table_header");

        Assert.Equal("row bg-dark text-light rounded", header.ClassName);
        header.Children[0].MarkupMatches("<div class=\"col-1\">Day</div>");
        header.Children[1].MarkupMatches("<div class=\"col-3\">Place</div>");
        header.Children[2].MarkupMatches("<div class=\"col\">Deal</div>");
    }

    [Fact]
    public void ShouldRenderComponentsUpcoming()
    {
        var cut = RenderDealTableHead("", true);

        var header = cut.Find("#deals_table_header");

        Assert.Equal("row bg-dark text-light rounded", header.ClassName);
        header.Children[0].MarkupMatches("<div class=\"col-1\">Start</div>");
        header.Children[1].MarkupMatches("<div class=\"col-3\">Place</div>");
        header.Children[2].MarkupMatches("<div class=\"col\">Deal</div>");
    }

    private IRenderedFragment RenderDealTableHead(string dow, bool upcoming = false)
    {
        return ctx.Render(@<DealTableHeader selectedDayOfWeek=@dow upcoming=@upcoming />);
    }
}
