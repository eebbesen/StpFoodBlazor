@using StpFoodBlazor.Components.Layout
@using StpFoodBlazor.Models
@using AngleSharp.Html.Dom
@using AngleSharp.Dom

@code {
    private TestContext ctx;

    void OnChangeStub(ChangeEventArgs e) { }

    public DealFilterBarTest()
    {
        ctx = new TestContext();
    }

    [Fact]
    public void ShouldRenderComponents()
    {
        var cut = RenderDealFilterBar("Tuesday", false, false, false);

        cut.Find("#filter-bar");
        var dow = cut.Find("#day-of-week-select");
        Assert.Equal("Tuesday", dow.GetAttribute("value"));
        var hh = cut.Find("#happy-hour-checkbox");
        Assert.False(((IHtmlInputElement)hh).IsChecked);
        var upcoming = cut.Find("#upcoming-checkbox");
        Assert.False(((IHtmlInputElement)upcoming).IsChecked);
    }

    [Fact]
    public void ShouldRenderDayOfWeek()
    {
        var cut = RenderDealFilterBar("Tuesday", false, false, false);

        var dow = cut.Find("#day-of-week-select");
        Assert.Equal("Tuesday", dow.GetAttribute("value"));
    }

    [Fact]
    public void ShouldRenderHappyHour()
    {
        var cut = RenderDealFilterBar("Tuesday", true, false, false);

        var hh = cut.Find("#happy-hour-checkbox");
        Assert.True(((IHtmlInputElement)hh).IsChecked);
    }

    [Fact]
    public void ShouldRenderUpcoming()
    {
        var cut = RenderDealFilterBar("Tuesday", false, true, false);

        var upcoming = cut.Find("#upcoming-checkbox");
        Assert.True(((IHtmlInputElement)upcoming).IsChecked);
    }

    private IRenderedFragment RenderDealFilterBar(string dow, bool hh, bool future, bool alc)
    {
        return ctx.Render(@<DealFilterBar selectedDayOfWeek=@dow happyHour=@hh upcoming=@future OnSelectedDayChanged="OnChangeStub"
            OnHappyHourChanged="OnChangeStub" OnUpComingChanged="OnChangeStub" />);
    }
}
