@using StpFoodBlazor.Helpers
@using StpFoodBlazor.Services
@using StpFoodBlazor.Models
@using StpFoodBlazor.Components.Layout
@inject IDealService DealServiceImpl
@inject ITimeService TimeServiceImpl

@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Deals</PageTitle>
    <div class="container mb-5">
        <DealFilterBar selectedDayOfWeek="@(selectedDayOfWeek == null ? @TimeServiceImpl.GetDayOfWeek() : selectedDayOfWeek)" OnSelectedDayChanged="OnSelectedDayChanged"
            happyHour="@happyHour" OnHappyHourChanged="OnHappyHourChanged" />
        <DealTableHeader selectedDayOfWeek="@(selectedDayOfWeek == null ? @TimeServiceImpl.GetDayOfWeek() : selectedDayOfWeek)" />

@if (deals == null)
{
        <DealTableBodyPlaceholder />
}
else
{
        <DealTableBody deals="@deals" selectedDayOfWeek="@selectedDayOfWeek" />
}
    </div>

@code {
    private DealEvent[]? deals;
    private DealEvent[]? allDeals = null;
    private string? selectedDayOfWeek = null;

    private bool happyHour = false;
    private bool alcoholOnly = false;

    [SupplyParameterFromQuery]
    public string? Dow { get; set; }
    [SupplyParameterFromQuery]
    public bool? Hh { get; set; }
    [SupplyParameterFromQuery]
    public bool? AlcoholOnly { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            allDeals = await DealServiceImpl.GetDealsAsync();
            FilterDeals();
            SortDeals();
            StateHasChanged();
        }
    }

    void OnSelectedDayChanged(ChangeEventArgs e)
    {
        selectedDayOfWeek = (string?)e.Value;
        FilterDeals();
        SortDeals();
    }

    void OnHappyHourChanged(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            happyHour = value;
        }
        FilterDeals();
        SortDeals();
    }

    protected override void OnParametersSet()
    {
        selectedDayOfWeek =
            String.IsNullOrEmpty(Dow) ? TimeServiceImpl.GetDayOfWeek().ToLower() : Dow.ToLower();
        happyHour = Hh == true;
        alcoholOnly = AlcoholOnly == true;
    }

    private void FilterDeals()
    {
        DealFilter filter = new DealFilter();
        filter.Deals = allDeals;
        filter.Day = selectedDayOfWeek;
        filter.HappyHour = happyHour;
        filter.AlcoholOnly = alcoholOnly;
        deals = filter.Filter();
    }

    private void SortDeals()
    {
        if (deals != null)
        {
            deals = DealSorter.Sort(deals);
        }
    }
}
