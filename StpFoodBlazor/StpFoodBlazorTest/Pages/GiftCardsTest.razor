@using Bunit
@using Bunit.Rendering
@using AngleSharp.Dom
@using AngleSharp.Html.Dom
@using StpFoodBlazor.Components.Pages
@using StpFoodBlazor.Services
@using StpFoodBlazorTest.Services

@code {

    private TestContext ctx;
    private TestTimeService timeService = new TestTimeService();
    public GiftCardsTest()
    {
        ctx = new TestContext();
        ctx.Services.AddSingleton<IGiftCardService>(new TestGiftCardService());
        ctx.Services.AddSingleton<ITimeService>(timeService);
    }

    public void Dispose(){
        // so that TestDealService attributes are reset
    }

    [Fact]
    public void GiftCardsShouldDisplayPlaceholderWhenLoading()
    {
        TestGiftCardService testGiftCardService = new TestGiftCardService();
        testGiftCardService.LongRunning = true;
        ctx.Services.AddSingleton<IGiftCardService>(testGiftCardService);

        var cut = ctx.Render(@<GiftCards />);
        var header = cut.WaitForElement("#giftcards_table_header");
        var elements = cut.WaitForElement("#giftcards_table_body_placeholder");

        Assert.Equal("Place", header.Children[0].InnerHtml);
        Assert.Equal(30, elements.ChildElementCount);
        Assert.Equal("<span class=\"col-12 rounded placeholder bg-white\">&nbsp;</span>",
            elements.Children[0].InnerHtml);
        Assert.Equal("<span class=\"col-12 rounded placeholder\">&nbsp;</span>",
            elements.Children[1].InnerHtml);
    }

    [Fact]
    public void GiftCardsShouldRenderRecords()
    {
        var cut = ctx.Render(@<GiftCards />);
        var elements = getElements(cut);

        Assert.Equal("1881 by Lake Elmo Inn", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("Buy $100 get $20", elements.Children[0].Children[1].InnerHtml);
        Assert.Equal("$20 valid 01/01/2025 - 04/30/2025", elements.Children[0].Children[2].InnerHtml);
        Assert.Equal("", elements.Children[0].Children[3].InnerHtml);
        Assert.Equal("12/24", elements.Children[0].Children[4].InnerHtml);
    }

    [Fact]
    public void GiftCardsShouldSortByNameAndFilterByEndDate20241210()
    {
        timeService.CurrentDate = new DateTime(2024, 12, 10);
        var cut = ctx.Render(@<GiftCards />);
        var elements = getElements(cut);

        Assert.Equal(31, elements.ChildElementCount);
        Assert.Equal("1881 by Lake Elmo Inn", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("Wild Bill Sports Saloon", elements.Children[30].Children[0].InnerHtml);
    }

    [Fact]
    public void GiftCardsShouldSortByNameAndFilterByEndDate20241201()
    {
        timeService.CurrentDate = new DateTime(2024, 12, 01);
        var cut = ctx.Render(@<GiftCards />);
        var elements = getElements(cut);

        Assert.Equal(38, elements.ChildElementCount);
        Assert.Equal("1881 by Lake Elmo Inn", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("Wild Bill Sports Saloon", elements.Children[37].Children[0].InnerHtml);
    }

    private IElement getElements(IRenderedFragment cut)
    {
        return cut.WaitForElement("#giftcards_table_body", TimeSpan.FromSeconds(5));
    }
}
