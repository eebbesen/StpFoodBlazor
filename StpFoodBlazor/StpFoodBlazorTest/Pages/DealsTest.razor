@using Bunit
@using Bunit.Rendering
@using AngleSharp.Dom
@using AngleSharp.Html.Dom
@using StpFoodBlazor.Components.Pages
@using StpFoodBlazor.Services
@using StpFoodBlazorTest.Services

@code {

    private TestContext ctx;
    private TestTimeService timeService = new TestTimeService();

    public DealsTest()
    {
        ctx = new TestContext();
        ctx.Services.AddSingleton<IDealService>(new TestDealService());
        ctx.Services.AddSingleton<ITimeService>(timeService);
    }

    [Fact]
    public void DealsShouldDisplayPlaceholderWhenLoading()
    {
        timeService.DayOfWeek = DayOfWeek.Wednesday.ToString();
        TestDealService testDealService = new TestDealService();
        testDealService.LongRunning = true;
        ctx.Services.AddSingleton<IDealService>(testDealService);

        var cut = ctx.Render(@<Deals />);
        cut.WaitForElement("#deals_table_body_placeholder");
        var elements = cut.Find("#deals_table_body_placeholder");

        Assert.Equal(30, elements.ChildElementCount);
        Assert.Equal("<span class=\"col-12 rounded placeholder bg-white\">&nbsp;</span>",
            elements.Children[0].InnerHtml);
        Assert.Equal("<span class=\"col-12 rounded placeholder\">&nbsp;</span>",
            elements.Children[1].InnerHtml);
    }

    [Fact]
    public void DealsShouldDisplayTwoColumnsWednesday()
    {
        timeService.DayOfWeek = DayOfWeek.Wednesday.ToString();
        var cut = ctx.Render(@<Deals />);
        var elements = getElements(cut);

        Assert.Equal("1881 by Lake Elmo Inn", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("<i class=\"bi bi-cup-straw me-1\" data-bs-toggle=\"tooltip\" title=\"alcohol\"></i>$10 select craft cocktail", elements.Children[0].Children[1].InnerHtml);
    }

    [Fact]
    public void DealsShouldDisplayTwoColumnsThursday()
    {
        timeService.DayOfWeek = DayOfWeek.Thursday.ToString();
        var cut = ctx.Render(@<Deals />);
        var elements = getElements(cut);

        Assert.Equal("1881 by Lake Elmo Inn", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("<i class=\"bi bi-cup-straw me-1\" data-bs-toggle=\"tooltip\" title=\"alcohol\"></i>$10 select craft cocktail", elements.Children[0].Children[1].InnerHtml);
    }

    [Fact]
    public void DealsShouldExcludeHappyHourWhenUncheckedThursday()
    {
        timeService.DayOfWeek = DayOfWeek.Thursday.ToString();
        var cut = ctx.Render(@<Deals />);
        var elements = getElements(cut);

        Assert.DoesNotContain("bi-clock", elements.InnerHtml);
    }

    [Fact]
    public void DealsShouldIncludeHappyHourWhenCheckedThursday()
    {
        timeService.DayOfWeek = DayOfWeek.Thursday.ToString();
        var cut = ctx.Render(@<Deals />);
        var elements = getElements(cut);
        cut.Find("#happy-hour-checkbox").Change(true);

        Assert.Contains("bi-clock", elements.InnerHtml);
    }

    [Fact]
    public void DealsShouldDisplayOnlyDealsForSelectedDayWednesday()
    {
        timeService.DayOfWeek = DayOfWeek.Wednesday.ToString();
        var cut = ctx.Render(@<Deals />);
        var elements = getElements(cut);

        Assert.Equal(23, elements.ChildElementCount);
    }

    [Fact]
    public void DealsShouldDefaultToCurrentDay()
    {
        ctx.Services.AddSingleton<ITimeService>(timeService);
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");
        getElements(cut); // just to make sure table is rendered

        Assert.Equal(DateTime.Today.DayOfWeek.ToString(), dowSelect.Value);
    }

    [Fact]
    public void DealsShouldChangeWhenNewValueSelectedMonday()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change("Monday");

        var elements = getElements(cut);
        Assert.Equal(16, elements.ChildElementCount);
    }

    [Fact]
    public void DealsShouldChangeWhenNewValueSelectedFriday()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change("Friday");

        var elements = getElements(cut);
        Assert.Equal(20, elements.ChildElementCount);
    }

    [Fact]
    public void DealsShouldSortByDay()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change(""); // All value in the select is ""

        var elements = getElements(cut);
        Assert.Equal(108, elements.ChildElementCount);
        Assert.Equal("Sunday", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("Saturday", elements.Children[107].Children[0].InnerHtml);
    }

    [Fact]
    public void DealsShouldShowDayColumnWhenAllDays()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change(""); // All value in the select is ""

        var elements = getElements(cut);
        Assert.Equal(108, elements.ChildElementCount);
        Assert.Equal("Sunday", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("Friday", elements.Children[96].Children[0].InnerHtml);
        Assert.Equal("Day", cut.Find("#deals_table_header").Children[0].InnerHtml);
    }

    [Fact]
    public void DealsShouldNotShowDayColumnWhenNotAllDays()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change("Friday");

        var elements = getElements(cut);
        Assert.Equal(20, elements.ChildElementCount);
        Assert.Equal("1881 by Lake Elmo Inn", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("Subway", elements.Children[17].Children[0].InnerHtml);
        Assert.Equal("Place", cut.Find("#deals_table_header").Children[0].InnerHtml);
    }

    [Fact]
    public void DealsShouldWrapDealInURLSunday()
    {
        timeService.DayOfWeek = DayOfWeek.Sunday.ToString();
        var expected = "<a href=\"https://static1.squarespace.com/static/5a2e198df09ca4a1b268ab29/t/6682be6dc1cace0a806d8ff5/1719844462234/PSP_HH_7.1.24.png\"" +
            " target=\"_blank\" class=\"text-decoration-none\"><div class=\"d-inline-block\"><i class=\"bi bi-clock me-1 d-none d-md-block\"" +
            " data-bs-toggle=\"tooltip\" title=\"16:00 - 18:00\"></i><div class=\"d-sm-block d-md-none me-1 fw-bold\">16:00 - 18:00</div></div>" +
            "<i class=\"bi bi-cup-straw me-1\" data-bs-toggle=\"tooltip\" title=\"alcohol\"></i>$5 beer, $7 select wine, $9 cocktail of the day</a>";
        var cut = ctx.Render(@<Deals />);
        getElements(cut);
        cut.Find("#happy-hour-checkbox").Change(true);
        var elements = getElements(cut);

        Assert.Equal("Parlour", elements.Children[10].Children[0].InnerHtml);
        Assert.Equal(expected, elements.Children[10].Children[1].InnerHtml);
    }

    private IElement getElements(IRenderedFragment cut)
    {
        cut.WaitForElement("#deals_table_body", TimeSpan.FromSeconds(5));
        return cut.Find("#deals_table_body");
    }
}
