@using Bunit
@using Bunit.Rendering
@using AngleSharp.Dom
@using AngleSharp.Html.Dom
@using StpFoodBlazor.Components.Pages
@using StpFoodBlazor.Services
@using StpFoodBlazorTest.Services

@code {

    private TestContext ctx;
    private TestTimeService timeService = new TestTimeService();

    public DealsTest()
    {
        ctx = new TestContext();
        ctx.Services.AddSingleton<IDealService>(new TestDealService());
        ctx.Services.AddSingleton<ITimeService>(timeService);
    }

    [Fact]
    public void DealsShouldDisplayAllColumnsWednesday()
    {
        timeService.DayOfWeek = DayOfWeek.Wednesday.ToString();
        var cut = ctx.Render(@<Deals />);
        var elements = getElements(cut);

        Assert.Equal("1881 by Lake Elmo Inn", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("$10 select craft cocktail", elements.Children[0].Children[1].InnerHtml);
    }

    [Fact]
    public void DealsShouldDisplayAllColumnsThursday()
    {
        timeService.DayOfWeek = DayOfWeek.Thursday.ToString();
        var cut = ctx.Render(@<Deals />);
        var elements = getElements(cut);

        Assert.Equal("1881 by Lake Elmo Inn", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("$10 select craft cocktail", elements.Children[0].Children[1].InnerHtml);
    }

    [Fact]
    public void DealsShouldDisplayOnlyDealsForSelectedDay()
    {
        timeService.DayOfWeek = DayOfWeek.Wednesday.ToString();
        var cut = ctx.Render(@<Deals />);
        var elements = getElements(cut);

        Assert.Equal(55, elements.ChildElementCount);
    }

    [Fact]
    public void DealsShouldDefaultToCurrentDay()
    {
        ctx.Services.AddSingleton<ITimeService>(timeService);
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        Assert.Equal(DateTime.Today.DayOfWeek.ToString(), dowSelect.Value);
    }

    [Fact]
    public void DealsShouldChangeWhenNewValueSelectedMonday()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change("Monday");

        var elements = getElements(cut);
        Assert.Equal(45, elements.ChildElementCount);
    }

    [Fact]
    public void DealsShouldChangeWhenNewValueSelectedFriday()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change("Friday");

        var elements = getElements(cut);
        Assert.Equal(51, elements.ChildElementCount);
    }

    [Fact]
    public void DealsShouldSortByDay()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change(""); // All value in the select is ""

        var elements = getElements(cut);
        Assert.Equal(299, elements.ChildElementCount);
        Assert.Equal("Sunday", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("Saturday", elements.Children[298].Children[0].InnerHtml);
    }

    [Fact]
    public void DealsShouldShowDayColumnWhenAllDays()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change(""); // All value in the select is ""

        var elements = getElements(cut);
        Assert.Equal(299, elements.ChildElementCount);
        Assert.Equal("Sunday", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("Saturday", elements.Children[298].Children[0].InnerHtml);
        Assert.Equal("Day", cut.Find("#deals_table_header").Children[0].InnerHtml);
    }

    [Fact]
    public void DealsShouldNotShowDayColumnWhenNotAllDays()
    {
        var cut = ctx.Render(@<Deals />);
        var dowSelect = (IHtmlSelectElement)cut.WaitForElement("#day-of-week-select");

        dowSelect.Change("Friday");

        var elements = getElements(cut);
        Assert.Equal(51, elements.ChildElementCount);
        Assert.Equal("1881 by Lake Elmo Inn", elements.Children[0].Children[0].InnerHtml);
        Assert.Equal("Wrestaurant at the Palace", elements.Children[50].Children[0].InnerHtml);
        Assert.Equal("Place", cut.Find("#deals_table_header").Children[0].InnerHtml);
    }

    private IElement getElements(IRenderedFragment cut)
    {
        cut.WaitForElement("#deals_table_body", TimeSpan.FromSeconds(5));
        return cut.Find("#deals_table_body");
    }
}
