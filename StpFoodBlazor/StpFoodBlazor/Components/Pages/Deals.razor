@using StpFoodBlazor.Helpers
@using StpFoodBlazor.Services
@using StpFoodBlazor.Models
@inject IDealService DealServiceImpl
@inject ITimeService TimeServiceImpl


@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Deals</PageTitle>

<div class="container mb-5">
@if (deals == null)
{
    <div class="row">
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="row align-items-center mb-2">
        <div class="d-flex align-items-center">
            <select class="select-element form-select" style="max-width: 9rem" id="day-of-week-select"
                @onchange="OnSelectedDayChanged" value="@selectedDayOfWeek">
                <option value="">All</option>
                @foreach (var dow in daysOfWeek)
                {
                    <option value="@dow">@dow</option>
                }
            </select>
            <div class="form-check-inline ms-3 d-flex flex-row-reverse">
                <label for="happy-hour-checkbox" class="form-check-label d-flex">
                    <span class="d-none d-sm-block ms-2">Happy Hour</span>
                    <i class="bi bi-clock ms-1" data-bs-toggle="tooltip" title="happy hour"></i>
                </label>
                <input type="checkbox" class="form-check-input" id="happy-hour-checkbox" checked="@happyHour"
                    @onchange="OnHappyHourChanged">
            </div>
            <div class="form-check-inline d-flex flex-row-reverse">
                <label for="alcohol-checkbox" class="form-check-label d-flex">
                    <span class="d-none d-sm-block ms-2">Alcohol</span>
                    <i class="bi bi-cup-straw ms-1" data-bs-toggle="tooltip" title="alcohol"></i>
                </label>
                <input type="checkbox" class="form-check-input" id="alcohol-checkbox" checked="@alcohol"
                        @onchange="OnAlcoholChanged">
            </div>
        </div>
    </div>
    <div class="row bg-dark text-light rounded" id="deals_table_header">
        @if (string.IsNullOrEmpty(selectedDayOfWeek))
        {
            <div class="col-1">Day</div>
        }
        <div class="col-3">Place</div>
        <div class="col">Deal</div>
    </div>
    <div id="deals_table_body">
        @{var rowCounter = 0;}
        @foreach (var deal in deals)
        {
        <div class="row @(rowCounter % 2 == 0 ? "" : "rounded bg-secondary bg-opacity-25")">
            @if (string.IsNullOrEmpty(selectedDayOfWeek))
            {
                <div class="col-1">@deal.Day</div>
            }
            <div class="col-3">@deal.Name</div>
            <div class="col">
                @if (!string.IsNullOrEmpty(deal.HappyHour))
                {
                    <i class="bi bi-clock" data-bs-toggle="tooltip" title=@deal.HappyHour>&nbsp;</i>
                }
                @if (!string.IsNullOrEmpty(deal.Alcohol))
                {
                            <i class="bi bi-cup-straw" data-bs-toggle="tooltip" title="alcohol">&nbsp;</i>
                }

                @if (!string.IsNullOrEmpty(deal.URL))
                {
                    <a href=@deal.URL target="_blank">@deal.Deal</a>
                }
                else
                {
                    @deal.Deal
                }
            </div>
        </div>
        rowCounter++;
        }
    </div>
}
</div>

@code {
    private DealEvent[]? deals;
    private DealEvent[]? allDeals = null;
    private string? selectedDayOfWeek = null;

    private bool happyHour = false;
    private bool alcohol = false;
    private static readonly List<DayOfWeek> daysOfWeek = Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>().ToList();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            allDeals = await DealServiceImpl.GetDealsAsync();
            selectedDayOfWeek = TimeServiceImpl.GetDayOfWeek();
            FilterDeals();
            SortDeals();
            StateHasChanged();
        }
    }

    void OnSelectedDayChanged(ChangeEventArgs e)
    {
        selectedDayOfWeek = (string?)e.Value;
        FilterDeals();
        SortDeals();
    }

    void OnHappyHourChanged(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            happyHour = value;
        }
        FilterDeals();
        SortDeals();
    }

    void OnAlcoholChanged(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            alcohol = value;
        }
        FilterDeals();
        SortDeals();
    }

    private void FilterDeals()
    {
        DealFilter filter = new DealFilter();
        filter.Deals = allDeals;
        filter.Day = selectedDayOfWeek;
        filter.HappyHour = happyHour;
        filter.Alcohol = alcohol;
        deals = filter.Filter();
    }

    private void SortDeals()
    {
        deals = DealSorter.Sort(deals);
    }
}
