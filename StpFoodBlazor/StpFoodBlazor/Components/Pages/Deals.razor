@using StpFoodBlazor.Helpers
@using StpFoodBlazor.Services
@using StpFoodBlazor.Models
@inject IDealService DealServiceImpl
@inject ITimeService TimeServiceImpl


@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Deals</PageTitle>

<div class="container">
    <div class="row">
        <h1>Deals</h1>
    </div>

@if (deals == null)
{
    <div class="row">
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="row">
        <div class="col-2">
            <select class="select-element form-select mb-2" id="day-of-week-select"
                @onchange="OnSelectedDayChanged" value="@selectedDayOfWeek">
                <option value="">All</option>
                @foreach (var dow in daysOfWeek)
                {
                    <option value="@dow">@dow</option>
                }
            </select>
        </div>
    </div>
    <div class="row bg-dark text-light rounded">
        <div class="col-1">Day</div>
        <div class="col-3">Place</div>
        <div class="col">Deal</div>
    </div>
    <div id="deals_table_body">
        @foreach (var deal in deals)
        {
        <div class="row">
            <div class="col-1">@deal.Day</div>
            <div class="col-3">@deal.Name</div>
            <div class="col">@deal.Deal</div>
        </div>
        }
    </div>
}
</div>

@code {
    private DealEvent[]? deals;
    private DealEvent[]? allDeals = null;
    private string? selectedDayOfWeek = null;
    private static readonly List<DayOfWeek> daysOfWeek = Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>().ToList();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            allDeals = await DealServiceImpl.GetDealsAsync();
            selectedDayOfWeek = TimeServiceImpl.GetDayOfWeek();
            FilterDeals();
            SortDeals();
            StateHasChanged();
        }
    }

    void OnSelectedDayChanged(ChangeEventArgs e)
    {
        selectedDayOfWeek = (string?)e.Value;
        FilterDeals();
        SortDeals();
    }

    private void FilterDeals()
    {
        DealFilter filter = new DealFilter();
        filter.Day = selectedDayOfWeek;
        filter.Deals = allDeals;
        deals = filter.Filter();
    }

    private void SortDeals()
    {
        deals = DealSorter.Sort(deals);
    }
}
