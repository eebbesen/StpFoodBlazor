@using StpFoodBlazor.Helpers
@using StpFoodBlazor.Models
@using StpFoodBlazor.Services
@inherits LayoutComponentBase
@inject NavigationManager NavMan
@inject IHolidayService HolidayServiceImpl
@inject IGiftCardService GiftCardServiceImpl

<div class="page">
    <main>
        <div class="top-row px-4" id="navbar">
            <div class="container d-md-flex" id="navbar-items">
                <div id="messages" class="messages text-center marquee w-100 d-none d-md-block">
                    <div class="marquee-content d-flex align-items-stretch">
                        @foreach (var holiday in holidayStrings)
                        {
                            <span class="holiday m-auto p-3">@holiday</span>
                        }
                    </div>
                </div>
                <div class="d-flex" id="nav-links" style="align-items: center;">
                    <a id="root-nav" href="/" class=@(classValuesPosition(""))>Deals</a>
                    <a id="giftcard-nav" href="giftcards" class=@(classValuesPosition("giftcards") + " position-relative")>Gift Cards
                        @if(giftCards.Length > 0)
                        {
                            <span id="giftcards-exist" class="position-absolute top-0 start-100 translate-middle p-1 bg-danger border border-light rounded-circle"></span>
                        }
                    </a>
                    <a id="about-nav" href="about" class=@(classValuesPosition("about"))>About</a>
                </div>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private string uri = string.Empty;
    private string holidays = String.Empty;
    private string[] holidayStrings = Array.Empty<string>();
    private GiftCard[] giftCards = Array.Empty<GiftCard>();
    private Boolean initialized = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        uri = NavMan.Uri;

        if (initialized)
        {
            return;
        }

        try
        {
            giftCards = await GiftCardServiceImpl.GetGiftCardsAsync();
            var today = DateTime.Now;
            var twoMoreDays = today.AddDays(2);
            Dictionary<string, string[]> holidayData = await HolidayServiceImpl.GetHolidaysRangeAsync(
                today.ToString("MM-dd"),
                twoMoreDays.ToString("MM-dd"));
            holidayStrings = Helper.BuildHolidayStrings(holidayData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching holidays: {ex.Message}");
        }
        initialized = true;
    }

    private string classValuesPosition(string uriTest)
    {
        var current = NavMan.ToBaseRelativePath(uri).Split('?')[0];

        if (uriTest == current)
        {
            return " d-none";
        }

        if (((current == "giftcards" || current == "") && uriTest == "about") ||
        (current == "about" && uriTest == "giftcards"))
        {
            return " justify-content-end";
        }

        return " flex-fill";
    }
}
